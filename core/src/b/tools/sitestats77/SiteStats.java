package b.tools.sitestats77;

import java.io.*;
import java.util.*;
import b.b.core.*;
import b.b.stats.*;
import b.util.*;

/**
 * @version 1.03
 */
public class SiteStats implements Serializable {
  private static final String saveDir = Config.Pathes.statsDir;
  private static final String fileName="sitestats.ser";

  private static long hitsTillAutosave;

  public static SiteStats stats=null;

  protected Map<String, URLStats> urls;
  protected Map<String, UserStats> users;

  protected SiteStats() {
    urls=new HashMap<String, URLStats>();
    users=new HashMap<String, UserStats>();
    hitsTillAutosave=50;
  }

  public static synchronized void init() {
    try {
      if (stats==null) {
        stats=(SiteStats)Serialization.deserialize(saveDir+fileName);
      }
    } catch(Exception e) {
      P.p("Error deserializing SiteStats:\n"+U77.toString(e));
      stats=new SiteStats();
    }
    hitsTillAutosave=50;
  }

  public static synchronized String save() {
    if (stats==null) {
      SiteStats.init();
      P.p("SiteStats77: nothing to save");
      return "SiteStats77: nothing to save";
    } else {
      Serialization.serialize(stats, saveDir+fileName);
      P.p("SiteStats77: saved");
      return "SiteStats77: saved";
    }
  }

  public synchronized int getHostCount(String url) {
    return urls.get(url).users.size();
  }

  public synchronized int getHitCount(String url) {
    return urls.get(url).hits.size();
  }

  public synchronized final List<Hit> allHits() {
    List<Hit> hits=new ArrayList<Hit>();
    for (URLStats url: urls.values()) {
      hits.addAll(url.hits);
    }
    return hits;
  }


  public synchronized String generate(String dir) {
    try {
      P.p("SiteStats.generate start");
      String saved=save();
      if (dir==null || dir.equals("")) {
        dir=Config.Pathes.statsDir;
      }
      List<Hit> hits=new ArrayList<Hit>();
      for (UserStats user: users.values()) {
        hits.addAll(user.hits);
      }
      Collections.sort(hits);
      String res =
"<html>\n"+
"  <head>\n"+
"    <title>Site Statistics by SiteStats77 "+Date77.datetime()+"</title>\n"+
"    <link rel=\"stylesheet\" href=\"style.css\" type=\"text/css\">\n"+
"  </head>\n"+
"  <body>\n"+
"<b>"+Date77.datetime()+" generated by SiteStats77 1.04</b><br>\n"+
"<a href=\"by_days_full.html\">by_days_full</a> <a href=\"by_days.html\">by_days</a><p>\n"+
"<table border=\"1\">\n";
      int day=-1;
      int hitNum=-1;
      int hitTotal=hits.size();
      int prevProc=-1;
      for (Hit hit: hits) {
        hitNum++;
        if (hitNum*100/hitTotal>prevProc) {
          prevProc=hitNum*100/hitTotal;
          P.p("SiteStats.stats.generate() hits: "+prevProc+"%");
        }
        if (day<Date77.dayOfYear(hit.time)) {
          day=Date77.dayOfYear(hit.time);
          res += "<tr><td colspan=\"7\"><b>"+Date77.date(hit.time)+"</b></td></tr>\n"+
              "<tr><td><b>time</b></td><td><b>ip</b></td><td><b>url</b></td>"+
              "<td><b>referer</b></td><td><b>params</b></td>"+
              "<td><b>browser</b></td><td><b>locale</b></td></tr>\n";
        }
        res += "<tr><td>"+Date77.time(hit.time)+"</td><td>"+hit.user.ip+"</td><td>"+hit.url.url+
            "</td><td>"+getReferer(hit.referer)+"</td><td>"+(hit.params==null?"":hit.params)+
            "</td><td>"+getBrowser(hit.browser)+"</td><td>"+hit.locale+"</td></tr>\n";
      }
      P.p("SiteStats.stats.generate().createByDays start");
      createByDays(dir);
      P.p("SiteStats.stats.generate().createByDays end");
      File77.create(dir+"/stats.html", res+"</table><p>\n"+
          "  </body>\n</html>\n");
      P.p("SiteStats.stats.generate() finished");
      return saved+"<br>\n<a href=\"stats/stats.html\">ready</a>";
    } catch(Exception e) {
      P.p("SiteStats.stats.generate() error:");
      e.printStackTrace();
      return "SiteStats.stats.generate() error:";
    }
  }

  private synchronized final void createByDays(String dir) {
    P.p("createByDays start");
    StringBuffer res=new StringBuffer(100000);
    res.append(
"<html>\n"+
"  <head>\n"+
"    <title>By Days(full) "+Date77.datetime()+"</title>\n"+
"    <link rel=\"stylesheet\" href=\"style.css\" type=\"text/css\">\n"+
"  </head>\n"+
"  <body>\n"+
"<b>By Days(full) "+Date77.datetime()+"</b><br><p>\n"+
"<table border=\"1\">\n");
    String th="</b></td><td><b>";
    String td="</td><td>";
    StringBuffer res2=new StringBuffer(100000);
    res2.append(
"<html>\n"+
"  <head>\n"+
"    <title>By Days "+Date77.datetime()+"</title>\n"+
"    <link rel=\"stylesheet\" href=\"style.css\" type=\"text/css\">\n"+
"  </head>\n"+
"  <body>\n"+
"<b>By Days "+Date77.datetime()+"</b><br><p>\n"+
"<table border=\"1\">\n"+
"<tr><td><b>date"+th+"hosts"+th+"hits</b></td></tr>\n");
    List<Hit> hits=allHits();
    P.p("sort all hits start");
    Collections.sort(hits, new Comparator() {
      public int compare(Object o1, Object o2) {
        Hit h1=(Hit)o1;
        Hit h2=(Hit)o2;
        return (int)(h1.time-h2.time);
      }
      public boolean equals(Object o) {
        return false;
      }
    });
    P.p("sort all hits end");
    int day=0;
    int hosts=0;
    int hitCount=0;
    Set<String> ips=null;
    int prevProc=-1;
    P.p("hits.size():"+hits.size());
    P.p("res.length:"+res.length());
    P.p("res2 length:"+res2.length());
    for (int i=0; i<hits.size(); i++) {
      if (prevProc<(int)((((double)i)/hits.size())*10000)) {
        prevProc=(int)((((double)i)/hits.size())*10000);
        P.p(""+((double)prevProc)/100+"%");
      }
      Hit hit=hits.get(i);
      int dayYear=Date77.dayOfYear(hit.time);
      if (dayYear>day) {
        ips=new HashSet<String>();
        day=dayYear;
        res2.append(
"<tr><td>"+Date77.date(hit.time)+td+hosts+td+hitCount+"</td></tr>\n");
        hosts=0;
        hitCount=0;
        res.append(
"<tr><td><b>"+Date77.date(hit.time)+th+"referer"+th+"ip"+th+"hits</b></td></tr>\n");
      }
      String ip=hit.user.ip;
      hitCount++;
      if (!ips.contains(ip)) {
        hosts++;
        ips.add(ip);
        res.append("<tr><td>"+Date77.time(hit.time)+td);
        res.append(SiteStatsUtil.getFirstReferer(ip, users)+td+ip+td);
        res.append(hitCount(ip, day, hits)+"</td></tr>\n");
      }
    }
    File77.create(dir+"/by_days_full.html", res+"</table><p>\n"+
"  </body>\n</html>\n");
    File77.create(dir+"/by_days.html", res2+"</table><p>\n"+
"  </body>\n</html>\n");
    P.p("Create by days end");
  }

  private synchronized static final int hitCount(String ip, int dayYear,
      List<Hit> sortedHits) {
    int count=0;
    for (Hit hit: sortedHits) {
      if (hit.user.ip.equals(ip) && Date77.dayOfYear(hit.time)==dayYear) count++;
    }
    return count;
  }

  private static final String getBrowser(String userAgent) {
    if (userAgent.contains("MSIE 7.0")) return "IE 7.0";
    if (userAgent.contains("MSIE 6.0")) return "IE 6.0";
    if (userAgent.contains("MSIE 5.5")) return "IE 5.5";
    if (userAgent.contains("Opera/9")&&userAgent.contains("Windows")) {
      return "Opera/9 Windows";
    }
    if (userAgent.contains("Googlebot")) return "Googlebot";
    if (userAgent.contains("http:"+P.bs+"help.yahoo.com/help/us/ysearch/slurp")) {
      return "Yahoo! Bot";
    }
    if (userAgent.contains("http:"+P.bs+"search.msn.com/msnbot.htm")) {
      return "msgnbot";
    }
    if (userAgent.contains("Mozilla/2.0 (compatible; Ask Jeeves/Teoma")) {
      return "Mozilla/2.0 (Ask Jeeves/Teoma)";
    }
    if (userAgent.contains("Mozilla/5.0") && userAgent.contains("Linux")) {
      return "Mozilla/5.0 Linux";
    }
    if (userAgent.contains("Mozilla/5.0") && userAgent.contains("Macintosh")) {
      return "Mozilla/5.0 Macintosh";
    }
    if (userAgent.contains("Mozilla/5.0") && userAgent.contains("Windows")) {
      return "Mozilla/5.0 Windows";
    }
    if (userAgent.contains("Windows") && userAgent.contains("Firefox/2")) {
      return "Windows Firefox/2";
    }
    return userAgent;
  }

  private static final String getReferer(String ref) {
    String btr="http:"+P.bs+"btrgame.com";
    return ref.startsWith(btr)?ref.substring(btr.length()):ref;
  }
}
